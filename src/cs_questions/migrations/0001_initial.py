# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-13 19:44
from __future__ import unicode_literals

import codeschool.models.mixins
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cs_core', '0001_initial'),
        ('cs_courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('cs_activities', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CodingIoAnswerKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.TextField(blank=True, help_text='Source code for the correct answer in the given programming language', verbose_name='Answer source code')),
                ('placeholder', models.TextField(blank=True, help_text='This optional field controls which code should be placed in the source code editor when a question is opened. This is useful to put boilerplate or even a full program that the student should modify. It is possible to configure a global per-language boilerplate and leave this field blank.', verbose_name='Placeholder source code')),
                ('is_valid', models.BooleanField(default=False)),
                ('iospec_hash', models.CharField(blank=True, max_length=32)),
                ('iospec_source', models.TextField(blank=True)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cs_core.ProgrammingLanguage')),
            ],
            options={
                'verbose_name': 'answer key',
                'verbose_name_plural': 'answer keys',
            },
        ),
        migrations.CreateModel(
            name='CodingIoResponse',
            fields=[
                ('response_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_activities.Response')),
                ('source', models.TextField(blank=True)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cs_core.ProgrammingLanguage')),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_activities.response',),
        ),
        migrations.CreateModel(
            name='NumericResponse',
            fields=[
                ('response_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_activities.Response')),
                ('value', models.FloatField(help_text='Result (it must be a number)', verbose_name='Value')),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_activities.response',),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('short_description', models.CharField(default='no-description', help_text='A very brief one-phrase description used in listings.', max_length=140, verbose_name='short description')),
                ('long_description', models.TextField(blank=True, help_text='A detailed explanation.', verbose_name='long description')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('author_name', models.CharField(blank=True, max_length=100, verbose_name="Author's name")),
                ('comment', models.TextField(blank=True, help_text='(Optional) Any private information that you want to associate to the object.', verbose_name='Comments')),
                ('is_active', models.BooleanField(default=False, help_text='Marks a question as active/inactive. Inactive questions are notshown publicly and are only available to the question owner.', verbose_name='is active')),
            ],
            options={
                'permissions': (('download_question', 'Can download question files'),),
            },
            bases=(codeschool.models.mixins.CopyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='QuestionActivity',
            fields=[
                ('activity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_activities.Activity')),
                ('recycle_unbound', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'question activity',
                'verbose_name_plural': 'question activities',
            },
            bases=('cs_activities.activity',),
        ),
        migrations.CreateModel(
            name='QuizActivity',
            fields=[
                ('activity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_activities.Activity')),
                ('quiz_grading_method', models.IntegerField(choices=[(0, 'largest grade of all responses'), (1, 'smallest grade of all responses'), (2, 'mean grade')])),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cs_core.ProgrammingLanguage')),
            ],
            options={
                'verbose_name': 'quiz activity',
                'verbose_name_plural': 'quiz activities',
            },
            bases=('cs_activities.activity',),
        ),
        migrations.CreateModel(
            name='QuizActivityItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='QuizResponse',
            fields=[
                ('response_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_activities.Response')),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_activities.response',),
        ),
        migrations.CreateModel(
            name='BooleanQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
                ('answer_key', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_questions.question',),
        ),
        migrations.CreateModel(
            name='CodingIoActivity',
            fields=[
                ('questionactivity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.QuestionActivity')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cs_core.ProgrammingLanguage')),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_questions.questionactivity',),
        ),
        migrations.CreateModel(
            name='CodingIoQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
                ('status', model_utils.fields.StatusField(choices=[('incomplete', 'is not yet fully initialized'), ('invalid', 'no valid answers'), ('ugly', 'inconsistent answers'), ('dirty', 'some valid answers'), ('valid', 'valid')], default='incomplete', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('iospec_size', models.PositiveIntegerField(blank=True, default=0, help_text='The desired number of test cases that will be computedafter comparing the iospec template with the answer key.This is only a suggested value and will only be applied ifthe response template uses input commands to generaterandom input.', verbose_name='number of iospec template expansions')),
                ('iospec_source', models.TextField(blank=True, help_text='Template used to grade I/O responses. See http://pythonhosted.org/iospec for a complete reference on the template format.', verbose_name='response template')),
                ('timeout', models.FloatField(blank=True, default=5.0, help_text='Defines the maximum runtime the grader will spend evaluating each test case.', verbose_name='timeout in seconds')),
            ],
            options={
                'verbose_name': 'input/output question',
                'verbose_name_plural': 'input/output questions',
            },
            bases=('cs_questions.question', models.Model),
        ),
        migrations.CreateModel(
            name='FileFreeAnswerQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_questions.question',),
        ),
        migrations.CreateModel(
            name='FreeAnswerQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
                ('metadata', models.TextField()),
                ('data_type', models.CharField(choices=[('file', 'Arbitrary file'), ('image', 'Image file'), ('pdf', 'PDF file'), ('richtext', 'Rich text input'), ('richtext', 'Plain text input')], max_length=10)),
                ('data_file', models.FileField(blank=True, null=True, upload_to='')),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_questions.question',),
        ),
        migrations.CreateModel(
            name='NumericQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
                ('answer', models.FloatField(help_text='The numeric value for the correct answer', verbose_name='Answer')),
                ('tolerance', models.FloatField(blank=True, default=0, help_text='If given, defines the tolerance within responses are still considered to be correct', verbose_name='Tolerance')),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_questions.question',),
        ),
        migrations.CreateModel(
            name='StringMatchQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_questions.Question')),
                ('answer_key', models.TextField()),
                ('is_regex', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_questions.question',),
        ),
        migrations.AddField(
            model_name='quizactivityitem',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cs_questions.Question'),
        ),
        migrations.AddField(
            model_name='quizactivityitem',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cs_questions.QuizActivity'),
        ),
        migrations.AddField(
            model_name='questionactivity',
            name='question_base',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='cs_questions.Question'),
        ),
        migrations.AddField(
            model_name='question',
            name='discipline',
            field=models.ForeignKey(blank=True, help_text='This optional field points to the discipline that is the relevant to question.', null=True, on_delete=django.db.models.deletion.CASCADE, to='cs_courses.Discipline'),
        ),
        migrations.AddField(
            model_name='question',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='User who created or uploaded this question.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='numericresponse',
            name='question_for_unbound',
            field=models.ForeignKey(blank=True, help_text='Question object reference for unbound responses. This should be null for activity responses.', null=True, on_delete=django.db.models.deletion.CASCADE, to='cs_questions.Question'),
        ),
        migrations.AddField(
            model_name='codingioresponse',
            name='question_for_unbound',
            field=models.ForeignKey(blank=True, help_text='Question object reference for unbound responses. This should be null for activity responses.', null=True, on_delete=django.db.models.deletion.CASCADE, to='cs_questions.Question'),
        ),
        migrations.AlterUniqueTogether(
            name='quizactivityitem',
            unique_together=set([('quiz', 'index')]),
        ),
        migrations.AddField(
            model_name='codingioanswerkey',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answer_keys', to='cs_questions.CodingIoQuestion'),
        ),
        migrations.AlterUniqueTogether(
            name='codingioanswerkey',
            unique_together=set([('question', 'language')]),
        ),
    ]
