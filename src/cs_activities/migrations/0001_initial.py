# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-13 19:44
from __future__ import unicode_literals

import codeschool.models.mixins
import cs_activities.models.activity
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cs_courses', '0001_initial'),
        ('cs_core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('short_description', models.CharField(default='no-description', help_text='A very brief one-phrase description used in listings.', max_length=140, verbose_name='short description')),
                ('long_description', models.TextField(blank=True, help_text='A detailed explanation.', verbose_name='long description')),
                ('start', models.DateTimeField(blank=True, null=True, verbose_name='start')),
                ('end', models.DateTimeField(blank=True, null=True, verbose_name='end')),
                ('status', model_utils.fields.StatusField(choices=[('draft', 'draft'), ('open', 'open'), ('closed', 'closed'), ('visible', 'visible'), (('expired',), 'expired')], default='draft', help_text='Only open activities will be visible and active to all students.', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='date of publication', when=set(['open']))),
                ('icon_src', models.CharField(blank=True, help_text='Optional icon name that can be used to personalize the activity. Material icons are available by using the "material:" namespace as in "material:menu".', max_length=50)),
                ('owner_id', models.PositiveIntegerField(blank=True, null=True, verbose_name="owner model's id")),
                ('target_id', models.PositiveIntegerField(blank=True, null=True, verbose_name="target model's id")),
            ],
            options={
                'verbose_name': 'activity',
                'verbose_name_plural': 'activities',
            },
            bases=(codeschool.models.mixins.CopyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FileItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveIntegerField()),
                ('file', models.FileField(upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='FinalResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_grade', models.DecimalField(blank=True, decimal_places=3, help_text='Final grade given to activity considering all responses, penalties, etc.', max_digits=6, null=True, verbose_name='Final grade')),
            ],
            options={
                'verbose_name': 'final response',
                'verbose_name_plural': 'final responses',
            },
            bases=(codeschool.models.mixins.CopyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GradingMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.TextField(blank=True)),
                ('family', models.CharField(blank=True, max_length=20)),
                ('data', models.TextField()),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('pending', 'pending'), ('waiting', 'waiting'), ('invalid', 'invalid'), ('done', 'done')], default='pending', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('feedback_data', picklefield.fields.PickledObjectField(blank=True, editable=False, null=True)),
                ('given_grade', models.DecimalField(blank=True, decimal_places=3, help_text='This grade is given by the auto-grader and represents the grade for the response before accounting for any bonuses or penalties.', max_digits=6, null=True, verbose_name='Percentage of maximum grade')),
                ('final_grade', models.DecimalField(blank=True, decimal_places=3, help_text="Similar to given_grade, but can account for additional factors such as delay penalties or for any other reason the teacher may want to override the student's grade.", max_digits=6, null=True, verbose_name='Final grade')),
                ('manual_override', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'response',
                'verbose_name_plural': 'responses',
            },
            bases=(codeschool.models.mixins.CopyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SyncCodeEditItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('next', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='previous', to='cs_activities.SyncCodeEditItem')),
            ],
        ),
        migrations.CreateModel(
            name='UrlItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.PositiveIntegerField()),
                ('url', models.URLField()),
                ('name', models.CharField(blank=True, max_length=50)),
                ('alt', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='FileDownloadActivity',
            fields=[
                ('activity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_activities.Activity')),
                ('provide_compressed', models.BooleanField(default=True)),
                ('zip_file', models.FileField(blank=True, null=True, upload_to='')),
                ('targz_file', models.FileField(blank=True, null=True, upload_to='')),
            ],
            options={
                'verbose_name': 'file download list',
                'verbose_name_plural': 'file download activities',
            },
            bases=('cs_activities.activity',),
        ),
        migrations.CreateModel(
            name='PageActivity',
            fields=[
                ('activity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_activities.Activity')),
                ('body', models.TextField()),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_activities.activity',),
        ),
        migrations.CreateModel(
            name='SyncCodeActivity',
            fields=[
                ('activity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_activities.Activity')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cs_core.ProgrammingLanguage')),
            ],
            options={
                'abstract': False,
            },
            bases=('cs_activities.activity',),
        ),
        migrations.CreateModel(
            name='UrlActivity',
            fields=[
                ('activity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cs_activities.Activity')),
            ],
            options={
                'verbose_name': 'URL list',
                'verbose_name_plural': 'url list activities',
            },
            bases=('cs_activities.activity',),
        ),
        migrations.AddField(
            model_name='response',
            name='activity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='cs_activities.Activity'),
        ),
        migrations.AddField(
            model_name='response',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='cs_activities.Response'),
        ),
        migrations.AddField(
            model_name='response',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='finalresponse',
            name='activity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='final_responses', to='cs_activities.Activity'),
        ),
        migrations.AddField(
            model_name='finalresponse',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='final_responses', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='activity',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='cs_courses.Course'),
        ),
        migrations.AddField(
            model_name='activity',
            name='grading_method',
            field=models.ForeignKey(blank=True, default=cs_activities.models.activity.grading_method_best, on_delete=django.db.models.deletion.CASCADE, to='cs_activities.GradingMethod'),
        ),
        migrations.AddField(
            model_name='activity',
            name='owner_content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities_as_owner', to='contenttypes.ContentType', verbose_name='owner model type'),
        ),
        migrations.AddField(
            model_name='activity',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='cs_activities.Activity'),
        ),
        migrations.AddField(
            model_name='activity',
            name='target_content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities_as_target', to='contenttypes.ContentType', verbose_name='target model type'),
        ),
        migrations.AddField(
            model_name='urlitem',
            name='activity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cs_activities.UrlActivity'),
        ),
        migrations.AddField(
            model_name='synccodeedititem',
            name='activity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data', to='cs_activities.SyncCodeActivity'),
        ),
        migrations.AlterUniqueTogether(
            name='gradingmethod',
            unique_together=set([('name', 'owner')]),
        ),
        migrations.AlterUniqueTogether(
            name='finalresponse',
            unique_together=set([('user', 'activity')]),
        ),
        migrations.AddField(
            model_name='fileitem',
            name='activity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cs_activities.FileDownloadActivity'),
        ),
        migrations.AlterUniqueTogether(
            name='urlitem',
            unique_together=set([('activity', 'index')]),
        ),
        migrations.AlterUniqueTogether(
            name='fileitem',
            unique_together=set([('activity', 'index')]),
        ),
    ]
